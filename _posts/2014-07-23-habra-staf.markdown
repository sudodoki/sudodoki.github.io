---
  id: 12
  uuid: "c1009e03-f565-4f86-934b-52187ee438ac"
  title: "Habra-стаф."
  slug: "habra-staf"
  image: None
  featured: 0
  page: 0
  status: "draft"
  language: "en_US"
  meta_title: None
  meta_description: None
  author_id: 1
  created_at: 1406072226912
  created_by: 1
  updated_at: 1406072232738
  updated_by: 1
  published_at: None
  published_by: None
  layout: "post"
  permalink: "/habra-staf/"
  published: False
---
Если кто не знаком с предметной областью, то <a href='github.com/npm/npm'>NPM</a> - node package manager (аналог bundler/composer/easy_install/nuget), средство для управления зависимостями в вашем Node.js проекте, что по совместительсву может выполнять некоторое количество полезных функций.  Написан <a href="https://github.com/isaacs">Айзеком Шлютером</a>, что его достаточно радикальным образом продвигал в начале своей истории (рассылая всем существующим Node.js проектам пулл-реквесты с добавлением package.json - манифестом зависимостей).

Все нижеприведенные вещи известны многим, но для некоторых это может стать приятным открытием, что сэкономит некоторое количество набираемых в символов.

<h4>pre-/post- myscript</h4>
Иногда, в целях автоматизации некоторой рутины, но при малом желании тащить за собой N мегабайт зависимостей в виде разных билд-инструментов, а в некоторых случаях под впечатлением от <a href='http://substack.net/task_automation_with_npm_run'>статьи</a> <a href='https://www.npmjs.org/~substack'>@substack'а</a>, разработчики могут начать в своих <a href='https://www.npmjs.org/doc/misc/npm-scripts.html'>npm script'ах</a> писать длиннющие строки, состоящие из команд и '&&'. По крайней мере, одним из выходов может служить разбитие одной сложной команды на несколько более простых. Самым замечательным является тот факт, что когда вы запускаете свой скрипт `npm run-script myscript`, npm также попытается выполнить команды, что занесены в premyscript и postmyscript перед и после выполнения вашего скрипта соответственно.
Код, что отвечает за это, довольно <a href="https://github.com/npm/npm/blob/master/lib/run-script.js#L115-L124">таки прост</a>, и пытается добавить к названию команды pre-/post- и запустить их в случае, если это сама по себе не pre/post команда и не команда 'restart', что обрабатывается особым способом.

<h4>npm run вместо run-script, npm i вместо npm install</h4>
Заголовок, в принципе, всё описывает: очень часто вместо `npm run-script` можно увидеть `npm run`, или `npm i`, что соответствует запуску команды `npm install`. Код, что делает это, <a href="https://github.com/npm/npm/blob/master/lib/npm.js#L161">прост</a>: используя библиотеку <a href="https://github.com/isaacs/abbrev-js">abbrev-js</a> все команды из списка превращаются в огромный словарь, в котором ключами служат сокращения слов, вида:

    {
    i: 'install',
    in: 'install',
    ins: 'install',
    ...
И запускает соответствующую команду.
<h4>Нет необходимости писать пути для исполняемых файлов в скриптах</h4>
Иногда npm скрипты используются, чтобы запускать локально установленные npm пакеты с бинарниками. Но часто люди не знают об одной приятно особенности: npm во время исполнения <a href="https://github.com/npm/npm/blob/master/lib/utils/lifecycle.js#L80"> добаляет</a> папку `node_modules/.bin` в аналог переменой PATH. То есть, если у вас локально установленная mocha, вам не нужно писать

    "scripts": {
	    "test": "./node_modules/.bin/mocha"
    }
А достаточно лишь написать `"test": "mocha"`. Приятным бонусом этого является то, что разработчики под виндоус перестанут жаловаться на то, что у них ничего не запускается (причина в том, что используются разные разделители в пути).
<h4>Бонус: require на файлах модуля</h4>
Команда require, оказывается, при работе с названиями модулей (а не относительными путями) может не только загрузить index.js/index.node файл из корня нашего модуля, что установлен в node_modules, но и предоставить возможность загрузить произвольный файл изнутри модуля (нарушая любую инкапсуляцию, но иногда бывает полезным). Поэтому можно делать `require('module/lib/hidden-stuff')`.
<h4>Бонус #2: пасхалки в npm</h4>
В нпм есть парочку <a href="https://github.com/npm/npm/blob/master/lib/npm.js#L154-L156">неплохих команд</a>, что могут скрасить будни работы с NPM.


